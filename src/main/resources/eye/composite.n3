prefix log: <http://www.w3.org/2000/10/swap/log#>
prefix math: <http://www.w3.org/2000/10/swap/math#>
prefix list: <http://www.w3.org/2000/10/swap/list#>
prefix state: <http://niche.cs.dal.ca/ns/state.owl#>
prefix : <http://niche.cs.dal.ca/ns/glean/base.owl#>
base <http://niche.cs.dal.ca/ns/glean/base.owl#>
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.


# - if a composite task is active, then ready all non-next subtasks 
# (i.e., not relying on another task to finish first)

{	?composite a :CompositeTask ;
		state:in :Active ; # active composite task
		# subtask does not need another task to complete first
		# (in that case, next.n3 governs the task state)
		:firstTask ?sub .
	
	{ ?sub state:in :Inactive } # subtask in inactive state
		e:becomes 
			{ ?sub state:in :Ready ; state:reason :readyFirstSubTask } .
	
} => { ?sub state:in :Ready } . # ready subtask


# - if a composite task is active, and all its subtasks are done 
# (i.e., at least one completed subtask, and all other subtasks are done (completed or discarded)), 
# then complete the composite task

{	?composite a :CompositeTask ;	
		:subTask ?complSub .
	# composite task has at least one completed subtask
	?complSub state:in :Completed . 

	# true if, for all subtasks of composite tasks, that subtask is done
	# (i.e., completed or discarded)
	( { ?composite :subTask ?sub } { ?sub state:in :Done } ) log:forAllIn _:x .

	{ ?composite state:in :Active } # composite task in active state
		e:becomes
			{ ?composite state:in :Completed ; state:reason :completeCompositeWithAllCompletedSubTasks } .

} => { ?composite state:in :Completed } . # complete composite task


# - if a composite task is discarded, then discard all its not-done subtasks 

{	?composite a :CompositeTask ;
		state:in :Discarded ; # discarded composite task
		:subTask ?sub .
	
	# subtask is not done yet (i.e., inactive/active)
	?sub state:in :NotDone .
	
	?sub state:in ?atomState .
	:NotDone state:atomStateList ?atomStates .
	?atomState list:in ?atomStates .

	# [] e:trace ( ?sub ?atomState ) .

	{ ?sub state:in ?atomState }
		e:becomes 
			{ ?sub state:in :Discarded ; state:reason :discardSubTasksOfDiscardedComposite } .
	
} => { ?sub state:in :Discarded } . # discarded subtask


# - if a composite task is not done, and all its subtasks are discarded, then discard the composite task

{	?composite a :CompositeTask ;
			:subTask ?oneSub . # at least one subtask
	
	?composite state:in :NotDone .
	:NotDone state:atomStateList ?atomStates .
	?atomState list:in ?atomStates .

	# true if, for all subtasks of the composite task, that subtask is discarded
	( { ?composite :subTask ?sub } { ?sub state:in :Discarded } ) log:forAllIn _:x .
	
	?composite state:in ?atomState .
	[] e:trace ( ?composite ?atomState ?atomStates ) .

	{ ?composite state:in ?atomState } # composite task in not-done sub-state
		e:becomes
			{ 	?composite state:in :Discarded ; 
				state:reason :discardedCompositeWithAllDiscardedSubTasks 
			} .
	
} => { ?composite state:in :Discarded } . # discard composite task